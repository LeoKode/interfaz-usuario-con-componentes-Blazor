@page "/"

@using BlazingPizza.Services
<!-- realizar solicitudes HTTP-->
@inject HttpClient HttpClient
<!-- manejar la navegación -->
@inject NavigationManager NavigationManager
<!-- gestionar el estado de la orden de pizzas-->
@inject OrderState OrderState

<div class="main">
    <h1>Blazing Pizzas</h1>
    <ul class="pizza-cards">
        <!-- Mostrar las pizzas especiales -->
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <!-- Cada pizza especial se representa como un elemento de lista -->
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <!-- Mostrar nombre, descripción y precio de la pizza -->
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<!-- Mostrar el diálogo de configuración de la pizza si es necesario -->
@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
                          OnCancel="OrderState.CancelConfigurePizzaDialog"
                          OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

<div class="sidebar">
    <!-- Verificar si hay pizzas en la orden -->
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            <!-- Iterar sobre cada pizza configurada en la orden -->
            @foreach (var configuredPizza in order.Pizzas)
            {
                <div class="cart-item">
                    <!-- Mostrar el tamaño y el nombre de la pizza -->
                    <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                    <!-- Mostrar el precio total de la pizza -->
                    <div class="item-price">
                        @configuredPizza.GetFormattedTotalPrice()
                    </div>
                    <!-- Enlace para eliminar la pizza configurada de la orden -->
                    <a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Mostrar mensaje cuando el carrito está vacío -->
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <!-- Mostrar el total de la orden si hay pizzas en el carrito -->
    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <!-- Mostrar el precio total de la orden formateado -->
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <!-- Enlace para proceder al checkout, deshabilitado si no hay pizzas en la orden -->
        <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

@code {
    // Lista para almacenar las pizzas especiales
    List<PizzaSpecial> specials = new List<PizzaSpecial>();
    Order order => OrderState.Order;

    // Obtener las pizzas especiales cuando se inicializa el componente
    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
    }
}
